{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","this","props","emotions","map","emotion","index","sadness","joy","fear","disgust","anger","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","value","setState","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","data","output","color","style","fontSize","sendForEmotionAnalysis","title","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c706242a.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n            {\n              [this.props.emotions].map((emotion, index) => (\n                  <>\n                        <tr>\n                            <td>Sadness:</td>\n                            <td>{emotion.sadness}</td>\n                        </tr>\n                        <tr>\n                            <td>Joy:</td>\n                            <td>{emotion.joy}</td>\n                        </tr>\n                        <tr>\n                            <td>Fear:</td>\n                            <td>{emotion.fear}</td>\n                        </tr>\n                        <tr>\n                            <td>Disgust:</td>\n                            <td>{emotion.disgust}</td>\n                        </tr>\n                        <tr>\n                            <td>Anger:</td>\n                            <td>{emotion.anger}</td>\n                        </tr>\n                    </>\n                ))\n            }\n            </tbody>\n          </table>\n          </div>\n          );\n        }\n    \n}\nexport default EmotionTable;","import './bootstrap.min.css';\nimport './App.css';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n      componentDidMount() {\n            document.title = \"Sentiment Analyzer\"\n      }\n      state = {\n            innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n            mode: \"text\",\n            sentimentOutput: [],\n            sentiment: true\n      }\n\n      renderTextArea = () => {\n            document.getElementById(\"textinput\").value = \"\";\n            if (this.state.mode === \"url\") {\n                  this.setState({\n                        innercomp: <textarea rows=\"4\" cols=\"50\" id=\"textinput\" />,\n                        mode: \"text\",\n                        sentimentOutput: [],\n                        sentiment: true\n                  })\n            }\n      }\n\n      renderTextBox = () => {\n            document.getElementById(\"textinput\").value = \"\";\n            if (this.state.mode === \"text\") {\n                  this.setState({\n                        innercomp: <textarea rows=\"1\" cols=\"50\" id=\"textinput\" />,\n                        mode: \"url\",\n                        sentimentOutput: [],\n                        sentiment: true\n                  })\n            }\n      }\n\n      sendForSentimentAnalysis = () => {\n            this.setState({ sentiment: true });\n            let ret = \"\";\n            let url = \".\";\n\n            if (this.state.mode === \"url\") {\n                  url = url + \"/url/sentiment?url=\" + document.getElementById(\"textinput\").value;\n            } else {\n                  url = url + \"/text/sentiment?text=\" + document.getElementById(\"textinput\").value;\n            }\n            ret = axios.get(url);\n            ret.then((response) => {\n\n                  this.setState({ sentimentOutput: response.data });\n                  let output = response.data;\n                  let color = \"white\";\n                  switch (output) {\n                        case \"positive\": color = \"green\"; break;\n                        case \"negative\": color = \"red\"; break;\n                        default: color = \"yellow\";\n                  }\n                  output = <div style={{ color: color, fontSize: 20 }}>{output}</div>\n                  this.setState({ sentimentOutput: output });\n            });\n      }\n\n      sendForEmotionAnalysis = () => {\n            this.setState({ sentiment: false });\n            let ret = \"\";\n            let url = \".\";\n            if (this.state.mode === \"url\") {\n                  url = url + \"/url/emotion?url=\" + document.getElementById(\"textinput\").value;\n            } else {\n                  url = url + \"/text/emotion/?text=\" + document.getElementById(\"textinput\").value;\n            }\n            ret = axios.get(url);\n\n            ret.then((response) => {\n                  this.setState({ sentimentOutput: <EmotionTable emotions={response.data} /> });\n            });\n      }\n\n\n      render() {\n            return (\n                  <div className=\"App\">\n                        <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n                        <button className=\"btn btn-dark\" onClick={this.renderTextBox}>URL</button>\n                        <br /><br />\n                        {this.state.innercomp}\n                        <br />\n                        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n                        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n                        <br />\n                        {this.state.sentimentOutput}\n                  </div>\n            );\n      }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}